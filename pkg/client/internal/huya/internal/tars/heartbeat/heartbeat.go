// Package heartbeat comment
// This file was generated by tars2go 1.1.4
// Generated from heartbeat.tars
package heartbeat

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// UserId struct implement
type UserId struct {
	LUid    int64  `json:"lUid"`
	SGuid   string `json:"sGuid"`
	SToken  string `json:"sToken"`
	SHuyaUA string `json:"sHuyaUA"`
	SCookie string `json:"sCookie"`
}

func (st *UserId) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *UserId) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.LUid, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SGuid, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SToken, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SHuyaUA, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SCookie, 4, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *UserId) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UserId, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *UserId) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.LUid, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SGuid, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SToken, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SHuyaUA, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SCookie, 4)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *UserId) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// UserHeartBeatReq struct implement
type UserHeartBeatReq struct {
	TId                  UserId `json:"tId"`
	LTid                 int64  `json:"lTid"`
	LSid                 int64  `json:"lSid"`
	LShortTid            int64  `json:"lShortTid"`
	LPid                 int64  `json:"lPid"`
	BWatchVideo          bool   `json:"bWatchVideo"`
	ELineType            int32  `json:"eLineType"`
	IFps                 int32  `json:"iFps"`
	IAttendee            int32  `json:"iAttendee"`
	IBandwidth           int32  `json:"iBandwidth"`
	ILastHeartElapseTime int32  `json:"iLastHeartElapseTime"`
}

func (st *UserHeartBeatReq) ResetDefault() {
	st.TId.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *UserHeartBeatReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = st.TId.ReadBlock(_is, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.LTid, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.LSid, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.LShortTid, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.LPid, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.BWatchVideo, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ELineType, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IFps, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IAttendee, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IBandwidth, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ILastHeartElapseTime, 10, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *UserHeartBeatReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UserHeartBeatReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *UserHeartBeatReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = st.TId.WriteBlock(_os, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.LTid, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.LSid, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.LShortTid, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.LPid, 4)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.BWatchVideo, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ELineType, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IFps, 7)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IAttendee, 8)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IBandwidth, 9)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ILastHeartElapseTime, 10)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *UserHeartBeatReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
